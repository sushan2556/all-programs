#interpreter vs compiler.
A compiled language is converted into machine code so that the processor can execute it. 
An interpreted language is a language in which the implementations execute instructions 
directly without earlier compiling a program into machine language. 
The compiled programs run faster than interpreted programs.


Python is an interpreted language, which means the source code of a Python program is 
converted into bytecode that is then executed by the Python virtual machine. Python is 
different from major compiled languages, such as C and C + +, as 
Python code is not required to be built and linked like code for these languages.

Statiscally typed language : -
We call a language “statically-typed” if it follows type checking during compilation. 
So, every detail about the variables and all the data types must be known before we do the compiling process.

Dynamically typed language : -
We call a language “dynamically typed” if type checking takes place while the program runs (run-time). 
In this type of language, there is no need to specify the data type of each variable while writing code.
It means that you can write pretty quickly since you do not have to specify types every time. 
Some languages do allow you to provide type information but do not require it.

#high level langugae vs low level lanaguage.
    high level language                         vs                      low level language 

1.	It is programmer friendly language.	                        It is a machine friendly language.
2.	High level language is less memory efficient.	            Low level language is high memory efficient.
3.	It is easy to understand.	                                It is tough to understand.
4.	It is simple to debug.	                                    It is complex to debug comparatively.
5.	It is simple to maintain.	                                It is complex to maintain comparatively.
6.	It is portable.	                                            It is non-portable.
7.	It can run on any platform.	                                It is machine-dependent.
8.	It needs compiler or interpreter for translation.	        It needs assembler for translation.
9.	It is used widely for programming.	                        It is not commonly used now-a-days in programming.

Variable in python
A Python variable is a symbolic name that is a reference or pointer to an object.

#what is Pvm.
Python Virtual Machine (PVM) is a program which provides programming environment. The role of PVM is to 
convert the byte code instructions into machine code so the computer can execute those machine code 
instructions and display the output.Interpreter converts the byte code into machine code and sends that 
machine code to the computer processor for execution.Since interpreter is playing the main role, often 
the Python Virtual Machine is also called an interpreter.

#what is PIP.
PIP is a package manager for Python packages, or modules if you like.
We can use pip to install packages that do not come with Python. 
The basic syntax of pip commands in command prompt is: pip 'argument'
Navigate your command line to the location of Python's script directory, and type the following:
C:\Users\Your Name\AppData\Local\Programs\Python\Python36-32\Scripts>pip install camelcase
Use the uninstall command to remove a package:
C:\Users\Your Name\AppData\Local\Programs\Python\Python36-32\Scripts>pip uninstall camelcase

#how python code runs.
Python programe involves 2 steps , Compilation and Interpriter
Compiler converts your programe in to byte code. Interpreter(Python Virtual Machine) converts the byte 
code into machine code for machine to understand.

#what is byte code.
Byte codes are referred to as the portable codes or p-codes. When a python code is interpreted 
into the machine language then the python code gets converted into bytes. These bytecodes are 
also called as the set of instructions for the virtual machine and the python interpreter is the 
implementation of the virtual machine. The set The intermediate format is called the bytecode. 
Bytecodes are :
Lower-level
Platform Independent
Efficient
Intermediate
Representation of source code
